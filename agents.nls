extensions[matrix]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  buses_count     ; The amount of other busses that exist
  message_protocol; The variable that is going to contain the message
  random-list
  score_matrix    ; Matrix that contains scores for every bus stop and passenger per bus

]
 
globals [graph]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Initialize and perform actions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to init-buses
  ; Initialize your agents here.  

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  
  calculate-scores  
  set-next-stop 
  
  set buses_count bus_id - length graph + 1 ; Set current amount of busses
  send-initial-message ; Send message to all other existing busses to let know that a new bus exists
  

end 

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  read-inbox
  calculate-scores
  set-next-stop
  travel-to next_stop
  drop-off-passengers  
  pick-up-passengers


  ;show inbox
  send-initial-message
  ;show message_protocol ; debug
  ;show bus_passengers
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Inbox ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Creates the message to be sent
to create-message
  set message_protocol (list "Bus type:" bus_type "Bus passengers:" bus_passengers "Previous stop: " previous_stop "Current stop: " current_stop "Next stop: " next_stop); ; Message protocol containing all variables that need sharing, strings added temporarily for readability
end

; Send message to other buses to let them know this bus exists
to send-initial-message 
  let id length graph 
  while [ id < bus_id ] [
   create-message
   send-message id message_protocol
   set id id + 1
  ]
end

; Read the inbox
to read-inbox
  foreach inbox [
   if item 1 ? - length graph + 1 > buses_count [ ; Check if message from new bus is received 
     set buses_count item 1 ? - length graph + 1  ; Updates buses_count
   ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Route ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set the next stop randomly to connected nodes
to set-next-stop    
  if next_stop = -1 [
    let score_list matrix:to-column-list score_matrix
    
    ifelse  (max item 2 score_list) > 0 [
    set next_stop position (max item 2 score_list) item 2 score_list
    ]
    [
    set next_stop one-of item current_stop graph ; Random
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Passenger actions (pick up/drop off) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pick up every passenger at the stop until bus is full
to pick-up-passengers
  if current_stop != -1 ; Check if bus is currently at a stop 
  [
    foreach get-passengers-at-stop current_stop
    [
      if length bus_passengers < bus_type3_capacity ; If the bus is not full
      [
        pick-up-passenger item 0 ? ; Pick up the passenger
      ]
    ]
  ]
  
end

; Drop off every passenger that has arrived at its destination
to drop-off-passengers 
  if current_stop != -1 ; Check if bus is currently at a stop 
  [
    foreach bus_passengers
    [
      if item 1 ? = current_stop ; If a passenger is at its destination
      [
        drop-off-passenger item 0 ? ; Drop off
      ]
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Calculate Score ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Calculate for every possible next bus stop the distance
to calculate-scores
 let dist-to-stop -1
 let passengers-at-stop -1
  ifelse current_stop = -1 ; calculate distances
  [ ;not at a bus stop ****** TODO - Also include distance from current path to bus stop in the distance *******
   foreach (item next_stop graph) 
   [
;    set dist-to-stop get-distance next_stop ? ;calculate distance to every connected stop
;    set dist-to-stop (precision dist-to-stop 1)    ; round off
;    matrix:set score_matrix ? 0 dist-to-stop
;    set passengers-at-stop (length (get-passengers-at-stop ?))
;    matrix:set score_matrix ? 1 passengers-at-stop
;    show "Matrix update - on the road: "
;    print matrix:pretty-print-text score_matrix       
   ]    
  ]
  [ ;if at a bus stop, check for every connected bus stop what's the distance between current stop and connected stops and update matrix
   set score_matrix matrix:make-constant 24 3 0   ; Create a matrix with dimensions of [25 10] (this is the highest person count in passengers-location_day1.csv) for storing scores of each group of passengers per bus stop
   foreach (item current_stop graph) 
   [
    set dist-to-stop get-distance current_stop ? ; Calculate distance to every connected stop
    set dist-to-stop (precision dist-to-stop 1)  ; Round off
    matrix:set score_matrix ? 0 dist-to-stop
    set passengers-at-stop (length (get-passengers-at-stop ?)) ; Amount of people that can be picked up at a stop
    matrix:set score_matrix ? 1 passengers-at-stop
    matrix:set score_matrix ? 2 passengers-at-stop / dist-to-stop
   ]

    ;show "Matrix update - at a bus stop: "
    ;print matrix:pretty-print-text score_matrix 
  ] 

  
;  if current_stop != -1
;  [
;   show (word "Passengers at current stop " current_stop ": " (get-passengers-at-stop current_stop))
;   print (length (get-passengers-at-stop current_stop))
;  ]   
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; USEFUL DEBUG COMMANDS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;print matrix:dimensions score_matrix ; debug - checks matrix dimensions
  ;matrix:get matrix row-i col-j ;could be used to check scores of others, also see: matrix:get-row matrix row-i
  ;matrix:set matrix row-i col-j new-value ;fill the matrix with the score per person using this command
  ;show "Matrix update: "
  ;print matrix:pretty-print-text score_matrix  

  ;if current_stop != -1 
  ;[
  ; show (word "Passengers at current stop " current_stop ": " (get-passengers-at-stop current_stop))    
  ;]   
  
